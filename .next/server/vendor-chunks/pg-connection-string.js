"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-connection-string";
exports.ids = ["vendor-chunks/pg-connection-string"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-connection-string/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-connection-string/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    result = new URL(str, 'postgres://base')\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n    dummyHost = true\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? __webpack_require__(/*! fs */ \"fs\") : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctY29ubmVjdGlvbi1zdHJpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxRUFBcUUsbUJBQU8sQ0FBQyxjQUFJOztBQUVqRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkd29vZGZvbnQvLi9ub2RlX21vZHVsZXMvcGctY29ubmVjdGlvbi1zdHJpbmcvaW5kZXguanM/OTYxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy9QYXJzZSBtZXRob2QgY29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2JyaWFuYy9ub2RlLXBvc3RncmVzXG4vL0NvcHlyaWdodCAoYykgMjAxMC0yMDE0IEJyaWFuIENhcmxzb24gKGJyaWFuLm0uY2FybHNvbkBnbWFpbC5jb20pXG4vL01JVCBMaWNlbnNlXG5cbi8vcGFyc2VzIGEgY29ubmVjdGlvbiBzdHJpbmdcbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICAvL3VuaXggc29ja2V0XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAnLycpIHtcbiAgICBjb25zdCBjb25maWcgPSBzdHIuc3BsaXQoJyAnKVxuICAgIHJldHVybiB7IGhvc3Q6IGNvbmZpZ1swXSwgZGF0YWJhc2U6IGNvbmZpZ1sxXSB9XG4gIH1cblxuICAvLyBDaGVjayBmb3IgZW1wdHkgaG9zdCBpbiBVUkxcblxuICBjb25zdCBjb25maWcgPSB7fVxuICBsZXQgcmVzdWx0XG4gIGxldCBkdW1teUhvc3QgPSBmYWxzZVxuICBpZiAoLyB8JVteYS1mMC05XXwlW2EtZjAtOV1bXmEtZjAtOV0vaS50ZXN0KHN0cikpIHtcbiAgICAvLyBFbnN1cmUgc3BhY2VzIGFyZSBlbmNvZGVkIGFzICUyMFxuICAgIHN0ciA9IGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1xcJTI1KFxcZFxcZCkvZywgJyUkMScpXG4gIH1cblxuICB0cnkge1xuICAgIHJlc3VsdCA9IG5ldyBVUkwoc3RyLCAncG9zdGdyZXM6Ly9iYXNlJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRoZSBVUkwgaXMgaW52YWxpZCBzbyB0cnkgYWdhaW4gd2l0aCBhIGR1bW15IGhvc3RcbiAgICByZXN1bHQgPSBuZXcgVVJMKHN0ci5yZXBsYWNlKCdALycsICdAX19fRFVNTVlfX18vJyksICdwb3N0Z3JlczovL2Jhc2UnKVxuICAgIGR1bW15SG9zdCA9IHRydWVcbiAgfVxuXG4gIC8vIFdlJ2QgbGlrZSB0byB1c2UgT2JqZWN0LmZyb21FbnRyaWVzKCkgaGVyZSBidXQgTm9kZS5qcyAxMCBkb2VzIG5vdCBzdXBwb3J0IGl0XG4gIGZvciAoY29uc3QgZW50cnkgb2YgcmVzdWx0LnNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICBjb25maWdbZW50cnlbMF1dID0gZW50cnlbMV1cbiAgfVxuXG4gIGNvbmZpZy51c2VyID0gY29uZmlnLnVzZXIgfHwgZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdC51c2VybmFtZSlcbiAgY29uZmlnLnBhc3N3b3JkID0gY29uZmlnLnBhc3N3b3JkIHx8IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQucGFzc3dvcmQpXG5cbiAgaWYgKHJlc3VsdC5wcm90b2NvbCA9PSAnc29ja2V0OicpIHtcbiAgICBjb25maWcuaG9zdCA9IGRlY29kZVVSSShyZXN1bHQucGF0aG5hbWUpXG4gICAgY29uZmlnLmRhdGFiYXNlID0gcmVzdWx0LnNlYXJjaFBhcmFtcy5nZXQoJ2RiJylcbiAgICBjb25maWcuY2xpZW50X2VuY29kaW5nID0gcmVzdWx0LnNlYXJjaFBhcmFtcy5nZXQoJ2VuY29kaW5nJylcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cbiAgY29uc3QgaG9zdG5hbWUgPSBkdW1teUhvc3QgPyAnJyA6IHJlc3VsdC5ob3N0bmFtZVxuICBpZiAoIWNvbmZpZy5ob3N0KSB7XG4gICAgLy8gT25seSBzZXQgdGhlIGhvc3QgaWYgdGhlcmUgaXMgbm8gZXF1aXZhbGVudCBxdWVyeSBwYXJhbS5cbiAgICBjb25maWcuaG9zdCA9IGRlY29kZVVSSUNvbXBvbmVudChob3N0bmFtZSlcbiAgfSBlbHNlIGlmIChob3N0bmFtZSAmJiAvXiUyZi9pLnRlc3QoaG9zdG5hbWUpKSB7XG4gICAgLy8gT25seSBwcmVwZW5kIHRoZSBob3N0bmFtZSB0byB0aGUgcGF0aG5hbWUgaWYgaXQgaXMgbm90IGEgVVJMIGVuY29kZWQgVW5peCBzb2NrZXQgaG9zdC5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBob3N0bmFtZSArIHJlc3VsdC5wYXRobmFtZVxuICB9XG4gIGlmICghY29uZmlnLnBvcnQpIHtcbiAgICAvLyBPbmx5IHNldCB0aGUgcG9ydCBpZiB0aGVyZSBpcyBubyBlcXVpdmFsZW50IHF1ZXJ5IHBhcmFtLlxuICAgIGNvbmZpZy5wb3J0ID0gcmVzdWx0LnBvcnRcbiAgfVxuXG4gIGNvbnN0IHBhdGhuYW1lID0gcmVzdWx0LnBhdGhuYW1lLnNsaWNlKDEpIHx8IG51bGxcbiAgY29uZmlnLmRhdGFiYXNlID0gcGF0aG5hbWUgPyBkZWNvZGVVUkkocGF0aG5hbWUpIDogbnVsbFxuXG4gIGlmIChjb25maWcuc3NsID09PSAndHJ1ZScgfHwgY29uZmlnLnNzbCA9PT0gJzEnKSB7XG4gICAgY29uZmlnLnNzbCA9IHRydWVcbiAgfVxuXG4gIGlmIChjb25maWcuc3NsID09PSAnMCcpIHtcbiAgICBjb25maWcuc3NsID0gZmFsc2VcbiAgfVxuXG4gIGlmIChjb25maWcuc3NsY2VydCB8fCBjb25maWcuc3Nsa2V5IHx8IGNvbmZpZy5zc2xyb290Y2VydCB8fCBjb25maWcuc3NsbW9kZSkge1xuICAgIGNvbmZpZy5zc2wgPSB7fVxuICB9XG5cbiAgLy8gT25seSB0cnkgdG8gbG9hZCBmcyBpZiB3ZSBleHBlY3QgdG8gcmVhZCBmcm9tIHRoZSBkaXNrXG4gIGNvbnN0IGZzID0gY29uZmlnLnNzbGNlcnQgfHwgY29uZmlnLnNzbGtleSB8fCBjb25maWcuc3Nscm9vdGNlcnQgPyByZXF1aXJlKCdmcycpIDogbnVsbFxuXG4gIGlmIChjb25maWcuc3NsY2VydCkge1xuICAgIGNvbmZpZy5zc2wuY2VydCA9IGZzLnJlYWRGaWxlU3luYyhjb25maWcuc3NsY2VydCkudG9TdHJpbmcoKVxuICB9XG5cbiAgaWYgKGNvbmZpZy5zc2xrZXkpIHtcbiAgICBjb25maWcuc3NsLmtleSA9IGZzLnJlYWRGaWxlU3luYyhjb25maWcuc3Nsa2V5KS50b1N0cmluZygpXG4gIH1cblxuICBpZiAoY29uZmlnLnNzbHJvb3RjZXJ0KSB7XG4gICAgY29uZmlnLnNzbC5jYSA9IGZzLnJlYWRGaWxlU3luYyhjb25maWcuc3Nscm9vdGNlcnQpLnRvU3RyaW5nKClcbiAgfVxuXG4gIHN3aXRjaCAoY29uZmlnLnNzbG1vZGUpIHtcbiAgICBjYXNlICdkaXNhYmxlJzoge1xuICAgICAgY29uZmlnLnNzbCA9IGZhbHNlXG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlICdwcmVmZXInOlxuICAgIGNhc2UgJ3JlcXVpcmUnOlxuICAgIGNhc2UgJ3ZlcmlmeS1jYSc6XG4gICAgY2FzZSAndmVyaWZ5LWZ1bGwnOiB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlICduby12ZXJpZnknOiB7XG4gICAgICBjb25maWcuc3NsLnJlamVjdFVuYXV0aG9yaXplZCA9IGZhbHNlXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25maWdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxuXG5wYXJzZS5wYXJzZSA9IHBhcnNlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-connection-string/index.js\n");

/***/ })

};
;
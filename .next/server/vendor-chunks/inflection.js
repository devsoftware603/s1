/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/inflection";
exports.ids = ["vendor-chunks/inflection"];
exports.modules = {

/***/ "(rsc)/./node_modules/inflection/lib/inflection.js":
/*!***************************************************!*\
  !*** ./node_modules/inflection/lib/inflection.js ***!
  \***************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( true ){\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }else {}\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n\n    'karate',\n    // 'kindness',\n    'knowledge',\n\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n\n    // 'quality',\n    // 'quantity',\n    'quartz',\n\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n\n    // 'yeast',\n    'yoga',\n\n    'zinc',\n    'zoology'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural : {\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\n      databases : new RegExp( '(database)s$'                   , 'gi' ),\n      drives    : new RegExp( '(drive)s$'                      , 'gi' ),\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\n      octopuses : new RegExp( '(octop|vir)uses$'               , 'gi' ),\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\n      summonses : new RegExp( '^(summons|bonus)es$'            , 'gi' ),\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\n      s         : new RegExp( 's$'                             , 'gi' )\n    },\n\n    singular : {\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\n      child     : new RegExp( '(child)$'                     , 'gi' ),\n      drive     : new RegExp( '(drive)$'                     , 'gi' ),\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\n      summons   : new RegExp( '^(summons|bonus)$'            , 'gi' ),\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\n      s         : new RegExp( 's$'                           , 'gi' ),\n      common    : new RegExp( '$'                            , 'gi' )\n    }\n  };\n\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ regex.plural.men       ],\n    [ regex.plural.people    ],\n    [ regex.plural.children  ],\n    [ regex.plural.tia       ],\n    [ regex.plural.analyses  ],\n    [ regex.plural.databases ],\n    [ regex.plural.drives    ],\n    [ regex.plural.hives     ],\n    [ regex.plural.curves    ],\n    [ regex.plural.lrves     ],\n    [ regex.plural.foves     ],\n    [ regex.plural.aeiouyies ],\n    [ regex.plural.series    ],\n    [ regex.plural.movies    ],\n    [ regex.plural.xes       ],\n    [ regex.plural.mice      ],\n    [ regex.plural.buses     ],\n    [ regex.plural.oes       ],\n    [ regex.plural.shoes     ],\n    [ regex.plural.crises    ],\n    [ regex.plural.octopuses ],\n    [ regex.plural.aliases   ],\n    [ regex.plural.summonses ],\n    [ regex.plural.oxen      ],\n    [ regex.plural.matrices  ],\n    [ regex.plural.feet      ],\n    [ regex.plural.teeth     ],\n    [ regex.plural.geese     ],\n    [ regex.plural.quizzes   ],\n    [ regex.plural.whereases ],\n    [ regex.plural.criteria  ],\n    [ regex.plural.genera    ],\n\n    // original rule\n    [ regex.singular.man      , '$1en' ],\n    [ regex.singular.person   , '$1ople' ],\n    [ regex.singular.child    , '$1ren' ],\n    [ regex.singular.drive    , '$1s' ],\n    [ regex.singular.ox       , '$1en' ],\n    [ regex.singular.axis     , '$1es' ],\n    [ regex.singular.octopus  , '$1uses' ],\n    [ regex.singular.alias    , '$1es' ],\n    [ regex.singular.summons  , '$1es' ],\n    [ regex.singular.bus      , '$1ses' ],\n    [ regex.singular.buffalo  , '$1oes' ],\n    [ regex.singular.tium     , '$1a' ],\n    [ regex.singular.sis      , 'ses' ],\n    [ regex.singular.ffe      , '$1$2ves' ],\n    [ regex.singular.hive     , '$1ves' ],\n    [ regex.singular.aeiouyy  , '$1ies' ],\n    [ regex.singular.matrix   , '$1ices' ],\n    [ regex.singular.vertex   , '$1ices' ],\n    [ regex.singular.x        , '$1es' ],\n    [ regex.singular.mouse    , '$1ice' ],\n    [ regex.singular.foot     , 'feet' ],\n    [ regex.singular.tooth    , 'teeth' ],\n    [ regex.singular.goose    , 'geese' ],\n    [ regex.singular.quiz     , '$1zes' ],\n    [ regex.singular.whereas  , '$1es' ],\n    [ regex.singular.criterion, '$1a' ],\n    [ regex.singular.genus    , 'genera' ],\n\n    [ regex.singular.s     , 's' ],\n    [ regex.singular.common, 's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ regex.singular.man     ],\n    [ regex.singular.person  ],\n    [ regex.singular.child   ],\n    [ regex.singular.drive   ],\n    [ regex.singular.ox      ],\n    [ regex.singular.axis    ],\n    [ regex.singular.octopus ],\n    [ regex.singular.alias   ],\n    [ regex.singular.summons ],\n    [ regex.singular.bus     ],\n    [ regex.singular.buffalo ],\n    [ regex.singular.tium    ],\n    [ regex.singular.sis     ],\n    [ regex.singular.ffe     ],\n    [ regex.singular.hive    ],\n    [ regex.singular.aeiouyy ],\n    [ regex.singular.x       ],\n    [ regex.singular.matrix  ],\n    [ regex.singular.mouse   ],\n    [ regex.singular.foot    ],\n    [ regex.singular.tooth   ],\n    [ regex.singular.goose   ],\n    [ regex.singular.quiz    ],\n    [ regex.singular.whereas ],\n    [ regex.singular.criterion ],\n    [ regex.singular.genus ],\n\n    // original rule\n    [ regex.plural.men      , '$1an' ],\n    [ regex.plural.people   , '$1rson' ],\n    [ regex.plural.children , '$1' ],\n    [ regex.plural.databases, '$1'],\n    [ regex.plural.drives   , '$1'],\n    [ regex.plural.genera   , 'genus'],\n    [ regex.plural.criteria , '$1on'],\n    [ regex.plural.tia      , '$1um' ],\n    [ regex.plural.analyses , '$1$2sis' ],\n    [ regex.plural.hives    , '$1ve' ],\n    [ regex.plural.curves   , '$1' ],\n    [ regex.plural.lrves    , '$1f' ],\n    [ regex.plural.aves     , '$1ve' ],\n    [ regex.plural.foves    , '$1fe' ],\n    [ regex.plural.movies   , '$1ovie' ],\n    [ regex.plural.aeiouyies, '$1y' ],\n    [ regex.plural.series   , '$1eries' ],\n    [ regex.plural.xes      , '$1' ],\n    [ regex.plural.mice     , '$1ouse' ],\n    [ regex.plural.buses    , '$1' ],\n    [ regex.plural.oes      , '$1' ],\n    [ regex.plural.shoes    , '$1' ],\n    [ regex.plural.crises   , '$1is' ],\n    [ regex.plural.octopuses, '$1us' ],\n    [ regex.plural.aliases  , '$1' ],\n    [ regex.plural.summonses, '$1' ],\n    [ regex.plural.oxen     , '$1' ],\n    [ regex.plural.matrices , '$1ix' ],\n    [ regex.plural.vertices , '$1ex' ],\n    [ regex.plural.feet     , 'foot' ],\n    [ regex.plural.teeth    , 'tooth' ],\n    [ regex.plural.geese    , 'goose' ],\n    [ regex.plural.quizzes  , '$1' ],\n    [ regex.plural.whereases, '$1' ],\n\n    [ regex.plural.ss, 'ss' ],\n    [ regex.plural.s , '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopuses' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n  /**\n   * This function will pluralize or singularlize a String appropriately based on a number value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */\n    inflect : function ( str, count, singular, plural ){\n      count = parseFloat( count, 10 );\n\n      if( isNaN( count )) return str;\n\n      if( count === 1 ){\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n      }else{\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n      }\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( inflector.hasOwnProperty( method )){\n          str = inflector[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.13.1';\n\n  return inflector;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5mbGVjdGlvbi9saWIvaW5mbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxJQUEwQztBQUNoRCxJQUFJLGlDQUFPLEVBQUUsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxrR0FBRTtBQUN4QixHQUFHLEtBQUssRUFJTDtBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7OztBQUlMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7Ozs7QUFJTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7OztBQUlMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsT0FBTztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVGQUF1RjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZHdvb2Rmb250Ly4vbm9kZV9tb2R1bGVzL2luZmxlY3Rpb24vbGliL2luZmxlY3Rpb24uanM/YmNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGluZmxlY3Rpb25cbiAqIENvcHlyaWdodChjKSAyMDExIEJlbiBMaW4gPGJlbkBkcmVhbWVyc2xhYi5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBBIHBvcnQgb2YgaW5mbGVjdGlvbi1qcyB0byBub2RlLmpzIG1vZHVsZS5cbiAqL1xuXG4oIGZ1bmN0aW9uICggcm9vdCwgZmFjdG9yeSApe1xuICBpZiggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICl7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5ICk7XG4gIH1lbHNlIGlmKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKXtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfWVsc2V7XG4gICAgcm9vdC5pbmZsZWN0aW9uID0gZmFjdG9yeSgpO1xuICB9XG59KCB0aGlzLCBmdW5jdGlvbiAoKXtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgaXMgYSBsaXN0IG9mIG5vdW5zIHRoYXQgdXNlIHRoZSBzYW1lIGZvcm0gZm9yIGJvdGggc2luZ3VsYXIgYW5kIHBsdXJhbC5cbiAgICogICAgICAgICAgICAgIFRoaXMgbGlzdCBzaG91bGQgcmVtYWluIGVudGlyZWx5IGluIGxvd2VyIGNhc2UgdG8gY29ycmVjdGx5IG1hdGNoIFN0cmluZ3MuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB2YXIgdW5jb3VudGFibGVfd29yZHMgPSBbXG4gICAgLy8gJ2FjY2VzcycsXG4gICAgJ2FjY29tbW9kYXRpb24nLFxuICAgICdhZHVsdGhvb2QnLFxuICAgICdhZHZlcnRpc2luZycsXG4gICAgJ2FkdmljZScsXG4gICAgJ2FnZ3Jlc3Npb24nLFxuICAgICdhaWQnLFxuICAgICdhaXInLFxuICAgICdhaXJjcmFmdCcsXG4gICAgJ2FsY29ob2wnLFxuICAgICdhbmdlcicsXG4gICAgJ2FwcGxhdXNlJyxcbiAgICAnYXJpdGhtZXRpYycsXG4gICAgLy8gJ2FydCcsXG4gICAgJ2Fzc2lzdGFuY2UnLFxuICAgICdhdGhsZXRpY3MnLFxuICAgIC8vICdhdHRlbnRpb24nLFxuXG4gICAgJ2JhY29uJyxcbiAgICAnYmFnZ2FnZScsXG4gICAgLy8gJ2JhbGxldCcsXG4gICAgLy8gJ2JlYXV0eScsXG4gICAgJ2JlZWYnLFxuICAgIC8vICdiZWVyJyxcbiAgICAvLyAnYmVoYXZpb3InLFxuICAgICdiaW9sb2d5JyxcbiAgICAvLyAnYmlsbGlhcmRzJyxcbiAgICAnYmxvb2QnLFxuICAgICdib3RhbnknLFxuICAgIC8vICdib3dlbHMnLFxuICAgICdicmVhZCcsXG4gICAgLy8gJ2J1c2luZXNzJyxcbiAgICAnYnV0dGVyJyxcblxuICAgICdjYXJib24nLFxuICAgICdjYXJkYm9hcmQnLFxuICAgICdjYXNoJyxcbiAgICAnY2hhbGsnLFxuICAgICdjaGFvcycsXG4gICAgJ2NoZXNzJyxcbiAgICAnY3Jvc3Nyb2FkcycsXG4gICAgJ2NvdW50cnlzaWRlJyxcblxuICAgIC8vICdkYW1hZ2UnLFxuICAgICdkYW5jaW5nJyxcbiAgICAvLyAnZGFuZ2VyJyxcbiAgICAnZGVlcicsXG4gICAgLy8gJ2RlbGlnaHQnLFxuICAgIC8vICdkZXNzZXJ0JyxcbiAgICAnZGlnbml0eScsXG4gICAgJ2RpcnQnLFxuICAgIC8vICdkaXN0cmlidXRpb24nLFxuICAgICdkdXN0JyxcblxuICAgICdlY29ub21pY3MnLFxuICAgICdlZHVjYXRpb24nLFxuICAgICdlbGVjdHJpY2l0eScsXG4gICAgLy8gJ2VtcGxveW1lbnQnLFxuICAgIC8vICdlbmVyZ3knLFxuICAgICdlbmdpbmVlcmluZycsXG4gICAgJ2Vuam95bWVudCcsXG4gICAgLy8gJ2VudGVydGFpbm1lbnQnLFxuICAgICdlbnZ5JyxcbiAgICAnZXF1aXBtZW50JyxcbiAgICAnZXRoaWNzJyxcbiAgICAnZXZpZGVuY2UnLFxuICAgICdldm9sdXRpb24nLFxuXG4gICAgLy8gJ2ZhaWx1cmUnLFxuICAgIC8vICdmYWl0aCcsXG4gICAgJ2ZhbWUnLFxuICAgICdmaWN0aW9uJyxcbiAgICAvLyAnZmlzaCcsXG4gICAgJ2Zsb3VyJyxcbiAgICAnZmx1JyxcbiAgICAnZm9vZCcsXG4gICAgLy8gJ2ZyZWVkb20nLFxuICAgIC8vICdmcnVpdCcsXG4gICAgJ2Z1ZWwnLFxuICAgICdmdW4nLFxuICAgIC8vICdmdW5lcmFsJyxcbiAgICAnZnVybml0dXJlJyxcblxuICAgICdnYWxsb3dzJyxcbiAgICAnZ2FyYmFnZScsXG4gICAgJ2dhcmxpYycsXG4gICAgLy8gJ2dhcycsXG4gICAgJ2dlbmV0aWNzJyxcbiAgICAvLyAnZ2xhc3MnLFxuICAgICdnb2xkJyxcbiAgICAnZ29sZicsXG4gICAgJ2dvc3NpcCcsXG4gICAgLy8gJ2dyYXNzJyxcbiAgICAnZ3JhdGl0dWRlJyxcbiAgICAnZ3JpZWYnLFxuICAgIC8vICdncm91bmQnLFxuICAgICdndWlsdCcsXG4gICAgJ2d5bW5hc3RpY3MnLFxuXG4gICAgLy8gJ2hhaXInLFxuICAgICdoYXBwaW5lc3MnLFxuICAgICdoYXJkd2FyZScsXG4gICAgJ2hhcm0nLFxuICAgICdoYXRlJyxcbiAgICAnaGF0cmVkJyxcbiAgICAnaGVhbHRoJyxcbiAgICAnaGVhdCcsXG4gICAgLy8gJ2hlaWdodCcsXG4gICAgJ2hlbHAnLFxuICAgICdob21ld29yaycsXG4gICAgJ2hvbmVzdHknLFxuICAgICdob25leScsXG4gICAgJ2hvc3BpdGFsaXR5JyxcbiAgICAnaG91c2V3b3JrJyxcbiAgICAnaHVtb3VyJyxcbiAgICAnaHVuZ2VyJyxcbiAgICAnaHlkcm9nZW4nLFxuXG4gICAgJ2ljZScsXG4gICAgJ2ltcG9ydGFuY2UnLFxuICAgICdpbmZsYXRpb24nLFxuICAgICdpbmZvcm1hdGlvbicsXG4gICAgLy8gJ2luanVzdGljZScsXG4gICAgJ2lubm9jZW5jZScsXG4gICAgLy8gJ2ludGVsbGlnZW5jZScsXG4gICAgJ2lyb24nLFxuICAgICdpcm9ueScsXG5cbiAgICAnamFtJyxcbiAgICAvLyAnamVhbG91c3knLFxuICAgIC8vICdqZWxseScsXG4gICAgJ2pld2VscnknLFxuICAgIC8vICdqb3knLFxuICAgICdqdWRvJyxcbiAgICAvLyAnanVpY2UnLFxuICAgIC8vICdqdXN0aWNlJyxcblxuICAgICdrYXJhdGUnLFxuICAgIC8vICdraW5kbmVzcycsXG4gICAgJ2tub3dsZWRnZScsXG5cbiAgICAvLyAnbGFib3VyJyxcbiAgICAnbGFjaycsXG4gICAgLy8gJ2xhbmQnLFxuICAgICdsYXVnaHRlcicsXG4gICAgJ2xhdmEnLFxuICAgICdsZWF0aGVyJyxcbiAgICAnbGVpc3VyZScsXG4gICAgJ2xpZ2h0bmluZycsXG4gICAgJ2xpbmd1aW5lJyxcbiAgICAnbGluZ3VpbmknLFxuICAgICdsaW5ndWlzdGljcycsXG4gICAgJ2xpdGVyYXR1cmUnLFxuICAgICdsaXR0ZXInLFxuICAgICdsaXZlc3RvY2snLFxuICAgICdsb2dpYycsXG4gICAgJ2xvbmVsaW5lc3MnLFxuICAgIC8vICdsb3ZlJyxcbiAgICAnbHVjaycsXG4gICAgJ2x1Z2dhZ2UnLFxuXG4gICAgJ21hY2Fyb25pJyxcbiAgICAnbWFjaGluZXJ5JyxcbiAgICAnbWFnaWMnLFxuICAgIC8vICdtYWlsJyxcbiAgICAnbWFuYWdlbWVudCcsXG4gICAgJ21hbmtpbmQnLFxuICAgICdtYXJibGUnLFxuICAgICdtYXRoZW1hdGljcycsXG4gICAgJ21heW9ubmFpc2UnLFxuICAgICdtZWFzbGVzJyxcbiAgICAvLyAnbWVhdCcsXG4gICAgLy8gJ21ldGFsJyxcbiAgICAnbWV0aGFuZScsXG4gICAgJ21pbGsnLFxuICAgICdtaW51cycsXG4gICAgJ21vbmV5JyxcbiAgICAvLyAnbW9vc2UnLFxuICAgICdtdWQnLFxuICAgICdtdXNpYycsXG4gICAgJ211bXBzJyxcblxuICAgICduYXR1cmUnLFxuICAgICduZXdzJyxcbiAgICAnbml0cm9nZW4nLFxuICAgICdub25zZW5zZScsXG4gICAgJ251cnR1cmUnLFxuICAgICdudXRyaXRpb24nLFxuXG4gICAgJ29iZWRpZW5jZScsXG4gICAgJ29iZXNpdHknLFxuICAgIC8vICdvaWwnLFxuICAgICdveHlnZW4nLFxuXG4gICAgLy8gJ3BhcGVyJyxcbiAgICAvLyAncGFzc2lvbicsXG4gICAgJ3Bhc3RhJyxcbiAgICAncGF0aWVuY2UnLFxuICAgIC8vICdwZXJtaXNzaW9uJyxcbiAgICAncGh5c2ljcycsXG4gICAgJ3BvZXRyeScsXG4gICAgJ3BvbGx1dGlvbicsXG4gICAgJ3BvdmVydHknLFxuICAgIC8vICdwb3dlcicsXG4gICAgJ3ByaWRlJyxcbiAgICAvLyAncHJvZHVjdGlvbicsXG4gICAgLy8gJ3Byb2dyZXNzJyxcbiAgICAvLyAncHJvbnVuY2lhdGlvbicsXG4gICAgJ3BzeWNob2xvZ3knLFxuICAgICdwdWJsaWNpdHknLFxuICAgICdwdW5jdHVhdGlvbicsXG5cbiAgICAvLyAncXVhbGl0eScsXG4gICAgLy8gJ3F1YW50aXR5JyxcbiAgICAncXVhcnR6JyxcblxuICAgICdyYWNpc20nLFxuICAgIC8vICdyYWluJyxcbiAgICAvLyAncmVjcmVhdGlvbicsXG4gICAgJ3JlbGF4YXRpb24nLFxuICAgICdyZWxpYWJpbGl0eScsXG4gICAgJ3Jlc2VhcmNoJyxcbiAgICAncmVzcGVjdCcsXG4gICAgJ3JldmVuZ2UnLFxuICAgICdyaWNlJyxcbiAgICAncnViYmlzaCcsXG4gICAgJ3J1bScsXG5cbiAgICAnc2FmZXR5JyxcbiAgICAvLyAnc2FsYWQnLFxuICAgIC8vICdzYWx0JyxcbiAgICAvLyAnc2FuZCcsXG4gICAgLy8gJ3NhdGlyZScsXG4gICAgJ3NjZW5lcnknLFxuICAgICdzZWFmb29kJyxcbiAgICAnc2Vhc2lkZScsXG4gICAgJ3NlcmllcycsXG4gICAgJ3NoYW1lJyxcbiAgICAnc2hlZXAnLFxuICAgICdzaG9wcGluZycsXG4gICAgLy8gJ3NpbGVuY2UnLFxuICAgICdzbGVlcCcsXG4gICAgLy8gJ3NsYW5nJ1xuICAgICdzbW9rZScsXG4gICAgJ3Ntb2tpbmcnLFxuICAgICdzbm93JyxcbiAgICAnc29hcCcsXG4gICAgJ3NvZnR3YXJlJyxcbiAgICAnc29pbCcsXG4gICAgLy8gJ3NvcnJvdycsXG4gICAgLy8gJ3NvdXAnLFxuICAgICdzcGFnaGV0dGknLFxuICAgIC8vICdzcGVlZCcsXG4gICAgJ3NwZWNpZXMnLFxuICAgIC8vICdzcGVsbGluZycsXG4gICAgLy8gJ3Nwb3J0JyxcbiAgICAnc3RlYW0nLFxuICAgIC8vICdzdHJlbmd0aCcsXG4gICAgJ3N0dWZmJyxcbiAgICAnc3R1cGlkaXR5JyxcbiAgICAvLyAnc3VjY2VzcycsXG4gICAgLy8gJ3N1Z2FyJyxcbiAgICAnc3Vuc2hpbmUnLFxuICAgICdzeW1tZXRyeScsXG5cbiAgICAvLyAndGVhJyxcbiAgICAndGVubmlzJyxcbiAgICAndGhpcnN0JyxcbiAgICAndGh1bmRlcicsXG4gICAgJ3RpbWJlcicsXG4gICAgLy8gJ3RpbWUnLFxuICAgIC8vICd0b2FzdCcsXG4gICAgLy8gJ3RvbGVyYW5jZScsXG4gICAgLy8gJ3RyYWRlJyxcbiAgICAndHJhZmZpYycsXG4gICAgJ3RyYW5zcG9ydGF0aW9uJyxcbiAgICAvLyAndHJhdmVsJyxcbiAgICAndHJ1c3QnLFxuXG4gICAgLy8gJ3VuZGVyc3RhbmRpbmcnLFxuICAgICd1bmRlcndlYXInLFxuICAgICd1bmVtcGxveW1lbnQnLFxuICAgICd1bml0eScsXG4gICAgLy8gJ3VzYWdlJyxcblxuICAgICd2YWxpZGl0eScsXG4gICAgJ3ZlYWwnLFxuICAgICd2ZWdldGF0aW9uJyxcbiAgICAndmVnZXRhcmlhbmlzbScsXG4gICAgJ3ZlbmdlYW5jZScsXG4gICAgJ3Zpb2xlbmNlJyxcbiAgICAvLyAndmlzaW9uJyxcbiAgICAndml0YWxpdHknLFxuXG4gICAgJ3dhcm10aCcsXG4gICAgLy8gJ3dhdGVyJyxcbiAgICAnd2VhbHRoJyxcbiAgICAnd2VhdGhlcicsXG4gICAgLy8gJ3dlaWdodCcsXG4gICAgJ3dlbGZhcmUnLFxuICAgICd3aGVhdCcsXG4gICAgLy8gJ3doaXNrZXknLFxuICAgIC8vICd3aWR0aCcsXG4gICAgJ3dpbGRsaWZlJyxcbiAgICAvLyAnd2luZScsXG4gICAgJ3dpc2RvbScsXG4gICAgLy8gJ3dvb2QnLFxuICAgIC8vICd3b29sJyxcbiAgICAvLyAnd29yaycsXG5cbiAgICAvLyAneWVhc3QnLFxuICAgICd5b2dhJyxcblxuICAgICd6aW5jJyxcbiAgICAnem9vbG9neSdcbiAgXTtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZXNlIHJ1bGVzIHRyYW5zbGF0ZSBmcm9tIHRoZSBzaW5ndWxhciBmb3JtIG9mIGEgbm91biB0byBpdHMgcGx1cmFsIGZvcm0uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHZhciByZWdleCA9IHtcbiAgICBwbHVyYWwgOiB7XG4gICAgICBtZW4gICAgICAgOiBuZXcgUmVnRXhwKCAnXihtfHdvbSllbiQnICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHBlb3BsZSAgICA6IG5ldyBSZWdFeHAoICcocGUpb3BsZSQnICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgY2hpbGRyZW4gIDogbmV3IFJlZ0V4cCggJyhjaGlsZClyZW4kJyAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICB0aWEgICAgICAgOiBuZXcgUmVnRXhwKCAnKFt0aV0pYSQnICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGFuYWx5c2VzICA6IG5ldyBSZWdFeHAoICcoKGEpbmFseXwoYilhfChkKWlhZ25vfChwKWFyZW50aGV8KHApcm9nbm98KHMpeW5vcHwodCloZSlzZXMkJywnZ2knICksXG4gICAgICBkYXRhYmFzZXMgOiBuZXcgUmVnRXhwKCAnKGRhdGFiYXNlKXMkJyAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGRyaXZlcyAgICA6IG5ldyBSZWdFeHAoICcoZHJpdmUpcyQnICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgaGl2ZXMgICAgIDogbmV3IFJlZ0V4cCggJyhoaXx0aSl2ZXMkJyAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBjdXJ2ZXMgICAgOiBuZXcgUmVnRXhwKCAnKGN1cnZlKXMkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGxydmVzICAgICA6IG5ldyBSZWdFeHAoICcoW2xyXSl2ZXMkJyAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgYXZlcyAgICAgIDogbmV3IFJlZ0V4cCggJyhbYV0pdmVzJCcgICAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBmb3ZlcyAgICAgOiBuZXcgUmVnRXhwKCAnKFteZm9dKXZlcyQnICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG1vdmllcyAgICA6IG5ldyBSZWdFeHAoICcobSlvdmllcyQnICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgYWVpb3V5aWVzIDogbmV3IFJlZ0V4cCggJyhbXmFlaW91eV18cXUpaWVzJCcgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBzZXJpZXMgICAgOiBuZXcgUmVnRXhwKCAnKHMpZXJpZXMkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHhlcyAgICAgICA6IG5ldyBSZWdFeHAoICcoeHxjaHxzc3xzaCllcyQnICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgbWljZSAgICAgIDogbmV3IFJlZ0V4cCggJyhbbXxsXSlpY2UkJyAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBidXNlcyAgICAgOiBuZXcgUmVnRXhwKCAnKGJ1cyllcyQnICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG9lcyAgICAgICA6IG5ldyBSZWdFeHAoICcobyllcyQnICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgc2hvZXMgICAgIDogbmV3IFJlZ0V4cCggJyhzaG9lKXMkJyAgICAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBjcmlzZXMgICAgOiBuZXcgUmVnRXhwKCAnKGNyaXN8YXh8dGVzdCllcyQnICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG9jdG9wdXNlcyA6IG5ldyBSZWdFeHAoICcob2N0b3B8dmlyKXVzZXMkJyAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgYWxpYXNlcyAgIDogbmV3IFJlZ0V4cCggJyhhbGlhc3xjYW52YXN8c3RhdHVzfGNhbXB1cyllcyQnLCAnZ2knICksXG4gICAgICBzdW1tb25zZXMgOiBuZXcgUmVnRXhwKCAnXihzdW1tb25zfGJvbnVzKWVzJCcgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG94ZW4gICAgICA6IG5ldyBSZWdFeHAoICdeKG94KWVuJyAgICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgbWF0cmljZXMgIDogbmV3IFJlZ0V4cCggJyhtYXRyKWljZXMkJyAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICB2ZXJ0aWNlcyAgOiBuZXcgUmVnRXhwKCAnKHZlcnR8aW5kKWljZXMkJyAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGZlZXQgICAgICA6IG5ldyBSZWdFeHAoICdeZmVldCQnICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgdGVldGggICAgIDogbmV3IFJlZ0V4cCggJ150ZWV0aCQnICAgICAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBnZWVzZSAgICAgOiBuZXcgUmVnRXhwKCAnXmdlZXNlJCcgICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHF1aXp6ZXMgICA6IG5ldyBSZWdFeHAoICcocXVpeil6ZXMkJyAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgd2hlcmVhc2VzIDogbmV3IFJlZ0V4cCggJ14od2hlcmVhcyllcyQnICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBjcml0ZXJpYSAgOiBuZXcgUmVnRXhwKCAnXihjcml0ZXJpKWEkJyAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGdlbmVyYSAgICA6IG5ldyBSZWdFeHAoICdeZ2VuZXJhJCcgICAgICAgICAgICAgICAgICAgICAgICwgJ2dpJyApLFxuICAgICAgc3MgICAgICAgIDogbmV3IFJlZ0V4cCggJ3NzJCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAnZ2knICksXG4gICAgICBzICAgICAgICAgOiBuZXcgUmVnRXhwKCAncyQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKVxuICAgIH0sXG5cbiAgICBzaW5ndWxhciA6IHtcbiAgICAgIG1hbiAgICAgICA6IG5ldyBSZWdFeHAoICdeKG18d29tKWFuJCcgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHBlcnNvbiAgICA6IG5ldyBSZWdFeHAoICcocGUpcnNvbiQnICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGNoaWxkICAgICA6IG5ldyBSZWdFeHAoICcoY2hpbGQpJCcgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGRyaXZlICAgICA6IG5ldyBSZWdFeHAoICcoZHJpdmUpJCcgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG94ICAgICAgICA6IG5ldyBSZWdFeHAoICdeKG94KSQnICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGF4aXMgICAgICA6IG5ldyBSZWdFeHAoICcoYXh8dGVzdClpcyQnICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG9jdG9wdXMgICA6IG5ldyBSZWdFeHAoICcob2N0b3B8dmlyKXVzJCcgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGFsaWFzICAgICA6IG5ldyBSZWdFeHAoICcoYWxpYXN8c3RhdHVzfGNhbnZhc3xjYW1wdXMpJCcsICdnaScgKSxcbiAgICAgIHN1bW1vbnMgICA6IG5ldyBSZWdFeHAoICdeKHN1bW1vbnN8Ym9udXMpJCcgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGJ1cyAgICAgICA6IG5ldyBSZWdFeHAoICcoYnUpcyQnICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGJ1ZmZhbG8gICA6IG5ldyBSZWdFeHAoICcoYnVmZmFsfHRvbWF0fHBvdGF0KW8kJyAgICAgICAsICdnaScgKSxcbiAgICAgIHRpdW0gICAgICA6IG5ldyBSZWdFeHAoICcoW3RpXSl1bSQnICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHNpcyAgICAgICA6IG5ldyBSZWdFeHAoICdzaXMkJyAgICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGZmZSAgICAgICA6IG5ldyBSZWdFeHAoICcoPzooW15mXSlmZXwoW2xyXSlmKSQnICAgICAgICAsICdnaScgKSxcbiAgICAgIGhpdmUgICAgICA6IG5ldyBSZWdFeHAoICcoaGl8dGkpdmUkJyAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGFlaW91eXkgICA6IG5ldyBSZWdFeHAoICcoW15hZWlvdXldfHF1KXkkJyAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHggICAgICAgICA6IG5ldyBSZWdFeHAoICcoeHxjaHxzc3xzaCkkJyAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG1hdHJpeCAgICA6IG5ldyBSZWdFeHAoICcobWF0cilpeCQnICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHZlcnRleCAgICA6IG5ldyBSZWdFeHAoICcodmVydHxpbmQpZXgkJyAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIG1vdXNlICAgICA6IG5ldyBSZWdFeHAoICcoW218bF0pb3VzZSQnICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGZvb3QgICAgICA6IG5ldyBSZWdFeHAoICdeZm9vdCQnICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHRvb3RoICAgICA6IG5ldyBSZWdFeHAoICdedG9vdGgkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGdvb3NlICAgICA6IG5ldyBSZWdFeHAoICdeZ29vc2UkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHF1aXogICAgICA6IG5ldyBSZWdFeHAoICcocXVpeikkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHdoZXJlYXMgICA6IG5ldyBSZWdFeHAoICdeKHdoZXJlYXMpJCcgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGNyaXRlcmlvbiA6IG5ldyBSZWdFeHAoICdeKGNyaXRlcmkpb24kJyAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGdlbnVzICAgICA6IG5ldyBSZWdFeHAoICdeZ2VudXMkJyAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIHMgICAgICAgICA6IG5ldyBSZWdFeHAoICdzJCcgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKSxcbiAgICAgIGNvbW1vbiAgICA6IG5ldyBSZWdFeHAoICckJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdnaScgKVxuICAgIH1cbiAgfTtcblxuICB2YXIgcGx1cmFsX3J1bGVzID0gW1xuXG4gICAgLy8gZG8gbm90IHJlcGxhY2UgaWYgaXRzIGFscmVhZHkgYSBwbHVyYWwgd29yZFxuICAgIFsgcmVnZXgucGx1cmFsLm1lbiAgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnBlb3BsZSAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmNoaWxkcmVuICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnRpYSAgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmFuYWx5c2VzICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmRhdGFiYXNlcyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmRyaXZlcyAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmhpdmVzICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmN1cnZlcyAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmxydmVzICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmZvdmVzICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmFlaW91eWllcyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnNlcmllcyAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm1vdmllcyAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnhlcyAgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm1pY2UgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmJ1c2VzICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm9lcyAgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnNob2VzICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmNyaXNlcyAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm9jdG9wdXNlcyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmFsaWFzZXMgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnN1bW1vbnNlcyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm94ZW4gICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm1hdHJpY2VzICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmZlZXQgICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnRlZXRoICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmdlZXNlICAgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnF1aXp6ZXMgICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLndoZXJlYXNlcyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmNyaXRlcmlhICBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmdlbmVyYSAgICBdLFxuXG4gICAgLy8gb3JpZ2luYWwgcnVsZVxuICAgIFsgcmVnZXguc2luZ3VsYXIubWFuICAgICAgLCAnJDFlbicgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLnBlcnNvbiAgICwgJyQxb3BsZScgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLmNoaWxkICAgICwgJyQxcmVuJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZHJpdmUgICAgLCAnJDFzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIub3ggICAgICAgLCAnJDFlbicgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLmF4aXMgICAgICwgJyQxZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5vY3RvcHVzICAsICckMXVzZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5hbGlhcyAgICAsICckMWVzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuc3VtbW9ucyAgLCAnJDFlcycgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLmJ1cyAgICAgICwgJyQxc2VzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYnVmZmFsbyAgLCAnJDFvZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci50aXVtICAgICAsICckMWEnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5zaXMgICAgICAsICdzZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5mZmUgICAgICAsICckMSQydmVzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuaGl2ZSAgICAgLCAnJDF2ZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5hZWlvdXl5ICAsICckMWllcycgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLm1hdHJpeCAgICwgJyQxaWNlcycgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLnZlcnRleCAgICwgJyQxaWNlcycgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLnggICAgICAgICwgJyQxZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5tb3VzZSAgICAsICckMWljZScgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLmZvb3QgICAgICwgJ2ZlZXQnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci50b290aCAgICAsICd0ZWV0aCcgXSxcbiAgICBbIHJlZ2V4LnNpbmd1bGFyLmdvb3NlICAgICwgJ2dlZXNlJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIucXVpeiAgICAgLCAnJDF6ZXMnIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci53aGVyZWFzICAsICckMWVzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuY3JpdGVyaW9uLCAnJDFhJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZ2VudXMgICAgLCAnZ2VuZXJhJyBdLFxuXG4gICAgWyByZWdleC5zaW5ndWxhci5zICAgICAsICdzJyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuY29tbW9uLCAncycgXVxuICBdO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlc2UgcnVsZXMgdHJhbnNsYXRlIGZyb20gdGhlIHBsdXJhbCBmb3JtIG9mIGEgbm91biB0byBpdHMgc2luZ3VsYXIgZm9ybS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHZhciBzaW5ndWxhcl9ydWxlcyA9IFtcblxuICAgIC8vIGRvIG5vdCByZXBsYWNlIGlmIGl0cyBhbHJlYWR5IGEgc2luZ3VsYXIgd29yZFxuICAgIFsgcmVnZXguc2luZ3VsYXIubWFuICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIucGVyc29uICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuY2hpbGQgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZHJpdmUgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIub3ggICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYXhpcyAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIub2N0b3B1cyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYWxpYXMgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuc3VtbW9ucyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYnVzICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYnVmZmFsbyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIudGl1bSAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuc2lzICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZmZlICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuaGl2ZSAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuYWVpb3V5eSBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIueCAgICAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIubWF0cml4ICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIubW91c2UgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZm9vdCAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIudG9vdGggICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuZ29vc2UgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIucXVpeiAgICBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIud2hlcmVhcyBdLFxuICAgIFsgcmVnZXguc2luZ3VsYXIuY3JpdGVyaW9uIF0sXG4gICAgWyByZWdleC5zaW5ndWxhci5nZW51cyBdLFxuXG4gICAgLy8gb3JpZ2luYWwgcnVsZVxuICAgIFsgcmVnZXgucGx1cmFsLm1lbiAgICAgICwgJyQxYW4nIF0sXG4gICAgWyByZWdleC5wbHVyYWwucGVvcGxlICAgLCAnJDFyc29uJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmNoaWxkcmVuICwgJyQxJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmRhdGFiYXNlcywgJyQxJ10sXG4gICAgWyByZWdleC5wbHVyYWwuZHJpdmVzICAgLCAnJDEnXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5nZW5lcmEgICAsICdnZW51cyddLFxuICAgIFsgcmVnZXgucGx1cmFsLmNyaXRlcmlhICwgJyQxb24nXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC50aWEgICAgICAsICckMXVtJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmFuYWx5c2VzICwgJyQxJDJzaXMnIF0sXG4gICAgWyByZWdleC5wbHVyYWwuaGl2ZXMgICAgLCAnJDF2ZScgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5jdXJ2ZXMgICAsICckMScgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5scnZlcyAgICAsICckMWYnIF0sXG4gICAgWyByZWdleC5wbHVyYWwuYXZlcyAgICAgLCAnJDF2ZScgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5mb3ZlcyAgICAsICckMWZlJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm1vdmllcyAgICwgJyQxb3ZpZScgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5hZWlvdXlpZXMsICckMXknIF0sXG4gICAgWyByZWdleC5wbHVyYWwuc2VyaWVzICAgLCAnJDFlcmllcycgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC54ZXMgICAgICAsICckMScgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5taWNlICAgICAsICckMW91c2UnIF0sXG4gICAgWyByZWdleC5wbHVyYWwuYnVzZXMgICAgLCAnJDEnIF0sXG4gICAgWyByZWdleC5wbHVyYWwub2VzICAgICAgLCAnJDEnIF0sXG4gICAgWyByZWdleC5wbHVyYWwuc2hvZXMgICAgLCAnJDEnIF0sXG4gICAgWyByZWdleC5wbHVyYWwuY3Jpc2VzICAgLCAnJDFpcycgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5vY3RvcHVzZXMsICckMXVzJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmFsaWFzZXMgICwgJyQxJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnN1bW1vbnNlcywgJyQxJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm94ZW4gICAgICwgJyQxJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLm1hdHJpY2VzICwgJyQxaXgnIF0sXG4gICAgWyByZWdleC5wbHVyYWwudmVydGljZXMgLCAnJDFleCcgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5mZWV0ICAgICAsICdmb290JyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnRlZXRoICAgICwgJ3Rvb3RoJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLmdlZXNlICAgICwgJ2dvb3NlJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLnF1aXp6ZXMgICwgJyQxJyBdLFxuICAgIFsgcmVnZXgucGx1cmFsLndoZXJlYXNlcywgJyQxJyBdLFxuXG4gICAgWyByZWdleC5wbHVyYWwuc3MsICdzcycgXSxcbiAgICBbIHJlZ2V4LnBsdXJhbC5zICwgJycgXVxuICBdO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBpcyBhIGxpc3Qgb2Ygd29yZHMgdGhhdCBzaG91bGQgbm90IGJlIGNhcGl0YWxpemVkIGZvciB0aXRsZSBjYXNlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdmFyIG5vbl90aXRsZWNhc2VkX3dvcmRzID0gW1xuICAgICdhbmQnLCAnb3InLCAnbm9yJywgJ2EnLCAnYW4nLCAndGhlJywgJ3NvJywgJ2J1dCcsICd0bycsICdvZicsICdhdCcsJ2J5JyxcbiAgICAnZnJvbScsICdpbnRvJywgJ29uJywgJ29udG8nLCAnb2ZmJywgJ291dCcsICdpbicsICdvdmVyJywgJ3dpdGgnLCAnZm9yJ1xuICBdO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlc2UgYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdXNlZCBmb3IgY29udmVydGluZyBiZXR3ZWVuIFN0cmluZyBmb3JtYXRzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdmFyIGlkX3N1ZmZpeCAgICAgICAgID0gbmV3IFJlZ0V4cCggJyhfaWRzfF9pZCkkJywgJ2cnICk7XG4gIHZhciB1bmRlcmJhciAgICAgICAgICA9IG5ldyBSZWdFeHAoICdfJywgJ2cnICk7XG4gIHZhciBzcGFjZV9vcl91bmRlcmJhciA9IG5ldyBSZWdFeHAoICdbXFwgX10nLCAnZycgKTtcbiAgdmFyIHVwcGVyY2FzZSAgICAgICAgID0gbmV3IFJlZ0V4cCggJyhbQS1aXSknLCAnZycgKTtcbiAgdmFyIHVuZGVyYmFyX3ByZWZpeCAgID0gbmV3IFJlZ0V4cCggJ15fJyApO1xuXG4gIHZhciBpbmZsZWN0b3IgPSB7XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCB0aGF0IGFwcGxpZXMgcnVsZXMgYmFzZWQgcmVwbGFjZW1lbnQgdG8gYSBTdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFN0cmluZyB0byBtb2RpZnkgYW5kIHJldHVybiBiYXNlZCBvbiB0aGUgcGFzc2VkIHJ1bGVzLlxuICAgKiBAcGFyYW0ge0FycmF5OiBbUmVnRXhwLCBTdHJpbmddfSBydWxlcyBSZWdleHAgdG8gbWF0Y2ggcGFpcmVkIHdpdGggU3RyaW5nIHRvIHVzZSBmb3IgcmVwbGFjZW1lbnRcbiAgICogQHBhcmFtIHtBcnJheTogW1N0cmluZ119IHNraXAgU3RyaW5ncyB0byBza2lwIGlmIHRoZXkgbWF0Y2hcbiAgICogQHBhcmFtIHtTdHJpbmd9IG92ZXJyaWRlIFN0cmluZyB0byByZXR1cm4gYXMgdGhvdWdoIHRoaXMgbWV0aG9kIHN1Y2NlZWRlZCAodXNlZCB0byBjb25mb3JtIHRvIEFQSXMpXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IFJldHVybiBwYXNzZWQgU3RyaW5nIG1vZGlmaWVkIGJ5IHBhc3NlZCBydWxlcy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHRoaXMuX2FwcGx5X3J1bGVzKCAnY293cycsIHNpbmd1bGFyX3J1bGVzICk7IC8vID09PSAnY293J1xuICAgKi9cbiAgICBfYXBwbHlfcnVsZXMgOiBmdW5jdGlvbiAoIHN0ciwgcnVsZXMsIHNraXAsIG92ZXJyaWRlICl7XG4gICAgICBpZiggb3ZlcnJpZGUgKXtcbiAgICAgICAgc3RyID0gb3ZlcnJpZGU7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdmFyIGlnbm9yZSA9ICggaW5mbGVjdG9yLmluZGV4T2YoIHNraXAsIHN0ci50b0xvd2VyQ2FzZSgpKSA+IC0xICk7XG5cbiAgICAgICAgaWYoICFpZ25vcmUgKXtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgdmFyIGogPSBydWxlcy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IoIDsgaSA8IGo7IGkrKyApe1xuICAgICAgICAgICAgaWYoIHN0ci5tYXRjaCggcnVsZXNbIGkgXVsgMCBdKSl7XG4gICAgICAgICAgICAgIGlmKCBydWxlc1sgaSBdWyAxIF0gIT09IHVuZGVmaW5lZCApe1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCBydWxlc1sgaSBdWyAwIF0sIHJ1bGVzWyBpIF1bIDEgXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuXG5cbiAgLyoqXG4gICAqIFRoaXMgbGV0cyB1cyBkZXRlY3QgaWYgYW4gQXJyYXkgY29udGFpbnMgYSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnIgVGhlIHN1YmplY3QgYXJyYXkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIE9iamVjdCB0byBsb2NhdGUgaW4gdGhlIEFycmF5LlxuICAgKiBAcGFyYW0ge051bWJlcn0gZnJvbV9pbmRleCBTdGFydHMgY2hlY2tpbmcgZnJvbSB0aGlzIHBvc2l0aW9uIGluIHRoZSBBcnJheS4ob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVfZnVuYyBGdW5jdGlvbiB1c2VkIHRvIGNvbXBhcmUgQXJyYXkgaXRlbSB2cyBwYXNzZWQgaXRlbS4ob3B0aW9uYWwpXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybiBpbmRleCBwb3NpdGlvbiBpbiB0aGUgQXJyYXkgb2YgdGhlIHBhc3NlZCBpdGVtLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgICAgdmFyIGluZmxlY3Rpb24gPSByZXF1aXJlKCAnaW5mbGVjdGlvbicgKTtcbiAgICpcbiAgICogICAgIGluZmxlY3Rpb24uaW5kZXhPZihbICdoaScsJ3RoZXJlJyBdLCAnZ3V5cycgKTsgLy8gPT09IC0xXG4gICAqICAgICBpbmZsZWN0aW9uLmluZGV4T2YoWyAnaGknLCd0aGVyZScgXSwgJ2hpJyApOyAvLyA9PT0gMFxuICAgKi9cbiAgICBpbmRleE9mIDogZnVuY3Rpb24gKCBhcnIsIGl0ZW0sIGZyb21faW5kZXgsIGNvbXBhcmVfZnVuYyApe1xuICAgICAgaWYoICFmcm9tX2luZGV4ICl7XG4gICAgICAgIGZyb21faW5kZXggPSAtMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgaSAgICAgPSBmcm9tX2luZGV4O1xuICAgICAgdmFyIGogICAgID0gYXJyLmxlbmd0aDtcblxuICAgICAgZm9yKCA7IGkgPCBqOyBpKysgKXtcbiAgICAgICAgaWYoIGFyclsgaSBdICA9PT0gaXRlbSB8fCBjb21wYXJlX2Z1bmMgJiYgY29tcGFyZV9mdW5jKCBhcnJbIGkgXSwgaXRlbSApKXtcbiAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgcGx1cmFsaXphdGlvbiBzdXBwb3J0IHRvIGV2ZXJ5IFN0cmluZyBvYmplY3QuXG4gICAqIEBwdWJsaWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YmplY3Qgc3RyaW5nLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1cmFsIE92ZXJyaWRlcyBub3JtYWwgb3V0cHV0IHdpdGggc2FpZCBTdHJpbmcuKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBTaW5ndWxhciBFbmdsaXNoIGxhbmd1YWdlIG5vdW5zIGFyZSByZXR1cm5lZCBpbiBwbHVyYWwgZm9ybS5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHZhciBpbmZsZWN0aW9uID0gcmVxdWlyZSggJ2luZmxlY3Rpb24nICk7XG4gICAqXG4gICAqICAgICBpbmZsZWN0aW9uLnBsdXJhbGl6ZSggJ3BlcnNvbicgKTsgLy8gPT09ICdwZW9wbGUnXG4gICAqICAgICBpbmZsZWN0aW9uLnBsdXJhbGl6ZSggJ29jdG9wdXMnICk7IC8vID09PSAnb2N0b3B1c2VzJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5wbHVyYWxpemUoICdIYXQnICk7IC8vID09PSAnSGF0cydcbiAgICogICAgIGluZmxlY3Rpb24ucGx1cmFsaXplKCAncGVyc29uJywgJ2d1eXMnICk7IC8vID09PSAnZ3V5cydcbiAgICovXG4gICAgcGx1cmFsaXplIDogZnVuY3Rpb24gKCBzdHIsIHBsdXJhbCApe1xuICAgICAgcmV0dXJuIGluZmxlY3Rvci5fYXBwbHlfcnVsZXMoIHN0ciwgcGx1cmFsX3J1bGVzLCB1bmNvdW50YWJsZV93b3JkcywgcGx1cmFsICk7XG4gICAgfSxcblxuXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gYWRkcyBzaW5ndWxhcml6YXRpb24gc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpbmd1bGFyIE92ZXJyaWRlcyBub3JtYWwgb3V0cHV0IHdpdGggc2FpZCBTdHJpbmcuKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBQbHVyYWwgRW5nbGlzaCBsYW5ndWFnZSBub3VucyBhcmUgcmV0dXJuZWQgaW4gc2luZ3VsYXIgZm9ybS5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHZhciBpbmZsZWN0aW9uID0gcmVxdWlyZSggJ2luZmxlY3Rpb24nICk7XG4gICAqXG4gICAqICAgICBpbmZsZWN0aW9uLnNpbmd1bGFyaXplKCAncGVvcGxlJyApOyAvLyA9PT0gJ3BlcnNvbidcbiAgICogICAgIGluZmxlY3Rpb24uc2luZ3VsYXJpemUoICdvY3RvcHVzZXMnICk7IC8vID09PSAnb2N0b3B1cydcbiAgICogICAgIGluZmxlY3Rpb24uc2luZ3VsYXJpemUoICdIYXRzJyApOyAvLyA9PT0gJ0hhdCdcbiAgICogICAgIGluZmxlY3Rpb24uc2luZ3VsYXJpemUoICdndXlzJywgJ3BlcnNvbicgKTsgLy8gPT09ICdwZXJzb24nXG4gICAqL1xuICAgIHNpbmd1bGFyaXplIDogZnVuY3Rpb24gKCBzdHIsIHNpbmd1bGFyICl7XG4gICAgICByZXR1cm4gaW5mbGVjdG9yLl9hcHBseV9ydWxlcyggc3RyLCBzaW5ndWxhcl9ydWxlcywgdW5jb3VudGFibGVfd29yZHMsIHNpbmd1bGFyICk7XG4gICAgfSxcblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcGx1cmFsaXplIG9yIHNpbmd1bGFybGl6ZSBhIFN0cmluZyBhcHByb3ByaWF0ZWx5IGJhc2VkIG9uIGEgbnVtYmVyIHZhbHVlXG4gICAqIEBwdWJsaWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YmplY3Qgc3RyaW5nLlxuICAgKiBAcGFyYW0ge051bWJlcn0gY291bnQgVGhlIG51bWJlciB0byBiYXNlIHBsdXJhbGl6YXRpb24gb2ZmIG9mLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2luZ3VsYXIgT3ZlcnJpZGVzIG5vcm1hbCBvdXRwdXQgd2l0aCBzYWlkIFN0cmluZy4ob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVyYWwgT3ZlcnJpZGVzIG5vcm1hbCBvdXRwdXQgd2l0aCBzYWlkIFN0cmluZy4ob3B0aW9uYWwpXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IEVuZ2xpc2ggbGFuZ3VhZ2Ugbm91bnMgYXJlIHJldHVybmVkIGluIHRoZSBwbHVyYWwgb3Igc2luZ3VsYXIgZm9ybSBiYXNlZCBvbiB0aGUgY291bnQuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi5pbmZsZWN0KCAncGVvcGxlJyAxICk7IC8vID09PSAncGVyc29uJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5pbmZsZWN0KCAnb2N0b3B1c2VzJyAxICk7IC8vID09PSAnb2N0b3B1cydcbiAgICogICAgIGluZmxlY3Rpb24uaW5mbGVjdCggJ0hhdHMnIDEgKTsgLy8gPT09ICdIYXQnXG4gICAqICAgICBpbmZsZWN0aW9uLmluZmxlY3QoICdndXlzJywgMSAsICdwZXJzb24nICk7IC8vID09PSAncGVyc29uJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5pbmZsZWN0KCAnaW5jaGVzJywgMS41ICk7IC8vID09PSAnaW5jaGVzJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5pbmZsZWN0KCAncGVyc29uJywgMiApOyAvLyA9PT0gJ3Blb3BsZSdcbiAgICogICAgIGluZmxlY3Rpb24uaW5mbGVjdCggJ29jdG9wdXMnLCAyICk7IC8vID09PSAnb2N0b3B1c2VzJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5pbmZsZWN0KCAnSGF0JywgMiApOyAvLyA9PT0gJ0hhdHMnXG4gICAqICAgICBpbmZsZWN0aW9uLmluZmxlY3QoICdwZXJzb24nLCAyLCBudWxsLCAnZ3V5cycgKTsgLy8gPT09ICdndXlzJ1xuICAgKi9cbiAgICBpbmZsZWN0IDogZnVuY3Rpb24gKCBzdHIsIGNvdW50LCBzaW5ndWxhciwgcGx1cmFsICl7XG4gICAgICBjb3VudCA9IHBhcnNlRmxvYXQoIGNvdW50LCAxMCApO1xuXG4gICAgICBpZiggaXNOYU4oIGNvdW50ICkpIHJldHVybiBzdHI7XG5cbiAgICAgIGlmKCBjb3VudCA9PT0gMSApe1xuICAgICAgICByZXR1cm4gaW5mbGVjdG9yLl9hcHBseV9ydWxlcyggc3RyLCBzaW5ndWxhcl9ydWxlcywgdW5jb3VudGFibGVfd29yZHMsIHNpbmd1bGFyICk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIGluZmxlY3Rvci5fYXBwbHlfcnVsZXMoIHN0ciwgcGx1cmFsX3J1bGVzLCB1bmNvdW50YWJsZV93b3JkcywgcGx1cmFsICk7XG4gICAgICB9XG4gICAgfSxcblxuXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gYWRkcyBjYW1lbGl6YXRpb24gc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBsb3dfZmlyc3RfbGV0dGVyIERlZmF1bHQgaXMgdG8gY2FwaXRhbGl6ZSB0aGUgZmlyc3QgbGV0dGVyIG9mIHRoZSByZXN1bHRzLihvcHRpb25hbClcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzaW5nIHRydWUgd2lsbCBsb3dlcmNhc2UgaXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IExvd2VyIGNhc2UgdW5kZXJzY29yZWQgd29yZHMgd2lsbCBiZSByZXR1cm5lZCBpbiBjYW1lbCBjYXNlLlxuICAgKiAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxseSAnLycgaXMgdHJhbnNsYXRlZCB0byAnOjonXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi5jYW1lbGl6ZSggJ21lc3NhZ2VfcHJvcGVydGllcycgKTsgLy8gPT09ICdNZXNzYWdlUHJvcGVydGllcydcbiAgICogICAgIGluZmxlY3Rpb24uY2FtZWxpemUoICdtZXNzYWdlX3Byb3BlcnRpZXMnLCB0cnVlICk7IC8vID09PSAnbWVzc2FnZVByb3BlcnRpZXMnXG4gICAqL1xuICAgIGNhbWVsaXplIDogZnVuY3Rpb24gKCBzdHIsIGxvd19maXJzdF9sZXR0ZXIgKXtcbiAgICAgIHZhciBzdHJfcGF0aCA9IHN0ci5zcGxpdCggJy8nICk7XG4gICAgICB2YXIgaSAgICAgICAgPSAwO1xuICAgICAgdmFyIGogICAgICAgID0gc3RyX3BhdGgubGVuZ3RoO1xuICAgICAgdmFyIHN0cl9hcnIsIGluaXRfeCwgaywgbCwgZmlyc3Q7XG5cbiAgICAgIGZvciggOyBpIDwgajsgaSsrICl7XG4gICAgICAgIHN0cl9hcnIgPSBzdHJfcGF0aFsgaSBdLnNwbGl0KCAnXycgKTtcbiAgICAgICAgayAgICAgICA9IDA7XG4gICAgICAgIGwgICAgICAgPSBzdHJfYXJyLmxlbmd0aDtcblxuICAgICAgICBmb3IoIDsgayA8IGw7IGsrKyApe1xuICAgICAgICAgIGlmKCBrICE9PSAwICl7XG4gICAgICAgICAgICBzdHJfYXJyWyBrIF0gPSBzdHJfYXJyWyBrIF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaXJzdCA9IHN0cl9hcnJbIGsgXS5jaGFyQXQoIDAgKTtcbiAgICAgICAgICBmaXJzdCA9IGxvd19maXJzdF9sZXR0ZXIgJiYgaSA9PT0gMCAmJiBrID09PSAwXG4gICAgICAgICAgICA/IGZpcnN0LnRvTG93ZXJDYXNlKCkgOiBmaXJzdC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIHN0cl9hcnJbIGsgXSA9IGZpcnN0ICsgc3RyX2FyclsgayBdLnN1YnN0cmluZyggMSApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyX3BhdGhbIGkgXSA9IHN0cl9hcnIuam9pbiggJycgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cl9wYXRoLmpvaW4oICc6OicgKTtcbiAgICB9LFxuXG5cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhZGRzIHVuZGVyc2NvcmUgc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBhbGxfdXBwZXJfY2FzZSBEZWZhdWx0IGlzIHRvIGxvd2VyY2FzZSBhbmQgYWRkIHVuZGVyc2NvcmUgcHJlZml4LihvcHRpb25hbClcbiAgICogICAgICAgICAgICAgICAgICBQYXNzaW5nIHRydWUgd2lsbCByZXR1cm4gYXMgZW50ZXJlZC5cbiAgICogQHJldHVybnMge1N0cmluZ30gQ2FtZWwgY2FzZWQgd29yZHMgYXJlIHJldHVybmVkIGFzIGxvd2VyIGNhc2VkIGFuZCB1bmRlcnNjb3JlZC5cbiAgICogICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsbHkgJzo6JyBpcyB0cmFuc2xhdGVkIHRvICcvJy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHZhciBpbmZsZWN0aW9uID0gcmVxdWlyZSggJ2luZmxlY3Rpb24nICk7XG4gICAqXG4gICAqICAgICBpbmZsZWN0aW9uLnVuZGVyc2NvcmUoICdNZXNzYWdlUHJvcGVydGllcycgKTsgLy8gPT09ICdtZXNzYWdlX3Byb3BlcnRpZXMnXG4gICAqICAgICBpbmZsZWN0aW9uLnVuZGVyc2NvcmUoICdtZXNzYWdlUHJvcGVydGllcycgKTsgLy8gPT09ICdtZXNzYWdlX3Byb3BlcnRpZXMnXG4gICAqICAgICBpbmZsZWN0aW9uLnVuZGVyc2NvcmUoICdNUCcsIHRydWUgKTsgLy8gPT09ICdNUCdcbiAgICovXG4gICAgdW5kZXJzY29yZSA6IGZ1bmN0aW9uICggc3RyLCBhbGxfdXBwZXJfY2FzZSApe1xuICAgICAgaWYoIGFsbF91cHBlcl9jYXNlICYmIHN0ciA9PT0gc3RyLnRvVXBwZXJDYXNlKCkpIHJldHVybiBzdHI7XG5cbiAgICAgIHZhciBzdHJfcGF0aCA9IHN0ci5zcGxpdCggJzo6JyApO1xuICAgICAgdmFyIGkgICAgICAgID0gMDtcbiAgICAgIHZhciBqICAgICAgICA9IHN0cl9wYXRoLmxlbmd0aDtcblxuICAgICAgZm9yKCA7IGkgPCBqOyBpKysgKXtcbiAgICAgICAgc3RyX3BhdGhbIGkgXSA9IHN0cl9wYXRoWyBpIF0ucmVwbGFjZSggdXBwZXJjYXNlLCAnXyQxJyApO1xuICAgICAgICBzdHJfcGF0aFsgaSBdID0gc3RyX3BhdGhbIGkgXS5yZXBsYWNlKCB1bmRlcmJhcl9wcmVmaXgsICcnICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHJfcGF0aC5qb2luKCAnLycgKS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgaHVtYW5pemUgc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBsb3dfZmlyc3RfbGV0dGVyIERlZmF1bHQgaXMgdG8gY2FwaXRhbGl6ZSB0aGUgZmlyc3QgbGV0dGVyIG9mIHRoZSByZXN1bHRzLihvcHRpb25hbClcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzaW5nIHRydWUgd2lsbCBsb3dlcmNhc2UgaXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IExvd2VyIGNhc2UgdW5kZXJzY29yZWQgd29yZHMgd2lsbCBiZSByZXR1cm5lZCBpbiBodW1hbml6ZWQgZm9ybS5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHZhciBpbmZsZWN0aW9uID0gcmVxdWlyZSggJ2luZmxlY3Rpb24nICk7XG4gICAqXG4gICAqICAgICBpbmZsZWN0aW9uLmh1bWFuaXplKCAnbWVzc2FnZV9wcm9wZXJ0aWVzJyApOyAvLyA9PT0gJ01lc3NhZ2UgcHJvcGVydGllcydcbiAgICogICAgIGluZmxlY3Rpb24uaHVtYW5pemUoICdtZXNzYWdlX3Byb3BlcnRpZXMnLCB0cnVlICk7IC8vID09PSAnbWVzc2FnZSBwcm9wZXJ0aWVzJ1xuICAgKi9cbiAgICBodW1hbml6ZSA6IGZ1bmN0aW9uICggc3RyLCBsb3dfZmlyc3RfbGV0dGVyICl7XG4gICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCBpZF9zdWZmaXgsICcnICk7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSggdW5kZXJiYXIsICcgJyApO1xuXG4gICAgICBpZiggIWxvd19maXJzdF9sZXR0ZXIgKXtcbiAgICAgICAgc3RyID0gaW5mbGVjdG9yLmNhcGl0YWxpemUoIHN0ciApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgY2FwaXRhbGl6YXRpb24gc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ30gQWxsIGNoYXJhY3RlcnMgd2lsbCBiZSBsb3dlciBjYXNlIGFuZCB0aGUgZmlyc3Qgd2lsbCBiZSB1cHBlci5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICAgIHZhciBpbmZsZWN0aW9uID0gcmVxdWlyZSggJ2luZmxlY3Rpb24nICk7XG4gICAqXG4gICAqICAgICBpbmZsZWN0aW9uLmNhcGl0YWxpemUoICdtZXNzYWdlX3Byb3BlcnRpZXMnICk7IC8vID09PSAnTWVzc2FnZV9wcm9wZXJ0aWVzJ1xuICAgKiAgICAgaW5mbGVjdGlvbi5jYXBpdGFsaXplKCAnbWVzc2FnZSBwcm9wZXJ0aWVzJywgdHJ1ZSApOyAvLyA9PT0gJ01lc3NhZ2UgcHJvcGVydGllcydcbiAgICovXG4gICAgY2FwaXRhbGl6ZSA6IGZ1bmN0aW9uICggc3RyICl7XG4gICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcblxuICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoIDAsIDEgKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZyggMSApO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJlcGxhY2VzIHVuZGVyc2NvcmVzIHdpdGggZGFzaGVzIGluIHRoZSBzdHJpbmcuXG4gICAqIEBwdWJsaWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YmplY3Qgc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXBsYWNlcyBhbGwgc3BhY2VzIG9yIHVuZGVyc2NvcmVzIHdpdGggZGFzaGVzLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgICAgdmFyIGluZmxlY3Rpb24gPSByZXF1aXJlKCAnaW5mbGVjdGlvbicgKTtcbiAgICpcbiAgICogICAgIGluZmxlY3Rpb24uZGFzaGVyaXplKCAnbWVzc2FnZV9wcm9wZXJ0aWVzJyApOyAvLyA9PT0gJ21lc3NhZ2UtcHJvcGVydGllcydcbiAgICogICAgIGluZmxlY3Rpb24uZGFzaGVyaXplKCAnTWVzc2FnZSBQcm9wZXJ0aWVzJyApOyAvLyA9PT0gJ01lc3NhZ2UtUHJvcGVydGllcydcbiAgICovXG4gICAgZGFzaGVyaXplIDogZnVuY3Rpb24gKCBzdHIgKXtcbiAgICAgIHJldHVybiBzdHIucmVwbGFjZSggc3BhY2Vfb3JfdW5kZXJiYXIsICctJyApO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgdGl0bGVpemUgc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ30gQ2FwaXRhbGl6ZXMgd29yZHMgYXMgeW91IHdvdWxkIGZvciBhIGJvb2sgdGl0bGUuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi50aXRsZWl6ZSggJ21lc3NhZ2VfcHJvcGVydGllcycgKTsgLy8gPT09ICdNZXNzYWdlIFByb3BlcnRpZXMnXG4gICAqICAgICBpbmZsZWN0aW9uLnRpdGxlaXplKCAnbWVzc2FnZSBwcm9wZXJ0aWVzIHRvIGtlZXAnICk7IC8vID09PSAnTWVzc2FnZSBQcm9wZXJ0aWVzIHRvIEtlZXAnXG4gICAqL1xuICAgIHRpdGxlaXplIDogZnVuY3Rpb24gKCBzdHIgKXtcbiAgICAgIHN0ciAgICAgICAgID0gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSggdW5kZXJiYXIsICcgJyApO1xuICAgICAgdmFyIHN0cl9hcnIgPSBzdHIuc3BsaXQoICcgJyApO1xuICAgICAgdmFyIGkgICAgICAgPSAwO1xuICAgICAgdmFyIGogICAgICAgPSBzdHJfYXJyLmxlbmd0aDtcbiAgICAgIHZhciBkLCBrLCBsO1xuXG4gICAgICBmb3IoIDsgaSA8IGo7IGkrKyApe1xuICAgICAgICBkID0gc3RyX2FyclsgaSBdLnNwbGl0KCAnLScgKTtcbiAgICAgICAgayA9IDA7XG4gICAgICAgIGwgPSBkLmxlbmd0aDtcblxuICAgICAgICBmb3IoIDsgayA8IGw7IGsrKyl7XG4gICAgICAgICAgaWYoIGluZmxlY3Rvci5pbmRleE9mKCBub25fdGl0bGVjYXNlZF93b3JkcywgZFsgayBdLnRvTG93ZXJDYXNlKCkpIDwgMCApe1xuICAgICAgICAgICAgZFsgayBdID0gaW5mbGVjdG9yLmNhcGl0YWxpemUoIGRbIGsgXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RyX2FyclsgaSBdID0gZC5qb2luKCAnLScgKTtcbiAgICAgIH1cblxuICAgICAgc3RyID0gc3RyX2Fyci5qb2luKCAnICcgKTtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoIDAsIDEgKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZyggMSApO1xuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgZGVtb2R1bGl6ZSBzdXBwb3J0IHRvIGV2ZXJ5IFN0cmluZyBvYmplY3QuXG4gICAqIEBwdWJsaWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YmplY3Qgc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZW1vdmVzIG1vZHVsZSBuYW1lcyBsZWF2aW5nIG9ubHkgY2xhc3MgbmFtZXMuKFJ1Ynkgc3R5bGUpXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi5kZW1vZHVsaXplKCAnTWVzc2FnZTo6QnVzOjpQcm9wZXJ0aWVzJyApOyAvLyA9PT0gJ1Byb3BlcnRpZXMnXG4gICAqL1xuICAgIGRlbW9kdWxpemUgOiBmdW5jdGlvbiAoIHN0ciApe1xuICAgICAgdmFyIHN0cl9hcnIgPSBzdHIuc3BsaXQoICc6OicgKTtcblxuICAgICAgcmV0dXJuIHN0cl9hcnJbIHN0cl9hcnIubGVuZ3RoIC0gMSBdO1xuICAgIH0sXG5cblxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGFkZHMgdGFibGVpemUgc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJuIGNhbWVsIGNhc2VkIHdvcmRzIGludG8gdGhlaXIgdW5kZXJzY29yZWQgcGx1cmFsIGZvcm0uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi50YWJsZWl6ZSggJ01lc3NhZ2VCdXNQcm9wZXJ0eScgKTsgLy8gPT09ICdtZXNzYWdlX2J1c19wcm9wZXJ0aWVzJ1xuICAgKi9cbiAgICB0YWJsZWl6ZSA6IGZ1bmN0aW9uICggc3RyICl7XG4gICAgICBzdHIgPSBpbmZsZWN0b3IudW5kZXJzY29yZSggc3RyICk7XG4gICAgICBzdHIgPSBpbmZsZWN0b3IucGx1cmFsaXplKCBzdHIgKTtcblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9LFxuXG5cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhZGRzIGNsYXNzaWZpY2F0aW9uIHN1cHBvcnQgdG8gZXZlcnkgU3RyaW5nIG9iamVjdC5cbiAgICogQHB1YmxpY1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3ViamVjdCBzdHJpbmcuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IFVuZGVyc2NvcmVkIHBsdXJhbCBub3VucyBiZWNvbWUgdGhlIGNhbWVsIGNhc2VkIHNpbmd1bGFyIGZvcm0uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi5jbGFzc2lmeSggJ21lc3NhZ2VfYnVzX3Byb3BlcnRpZXMnICk7IC8vID09PSAnTWVzc2FnZUJ1c1Byb3BlcnR5J1xuICAgKi9cbiAgICBjbGFzc2lmeSA6IGZ1bmN0aW9uICggc3RyICl7XG4gICAgICBzdHIgPSBpbmZsZWN0b3IuY2FtZWxpemUoIHN0ciApO1xuICAgICAgc3RyID0gaW5mbGVjdG9yLnNpbmd1bGFyaXplKCBzdHIgKTtcblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9LFxuXG5cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhZGRzIGZvcmVpZ24ga2V5IHN1cHBvcnQgdG8gZXZlcnkgU3RyaW5nIG9iamVjdC5cbiAgICogQHB1YmxpY1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3ViamVjdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZHJvcF9pZF91YmFyIERlZmF1bHQgaXMgdG8gc2VwZXJhdGUgaWQgd2l0aCBhbiB1bmRlcmJhciBhdCB0aGUgZW5kIG9mIHRoZSBjbGFzcyBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBwYXNzIHRydWUgdG8gc2tpcCBpdC4ob3B0aW9uYWwpXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IFVuZGVyc2NvcmVkIHBsdXJhbCBub3VucyBiZWNvbWUgdGhlIGNhbWVsIGNhc2VkIHNpbmd1bGFyIGZvcm0uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICAgICB2YXIgaW5mbGVjdGlvbiA9IHJlcXVpcmUoICdpbmZsZWN0aW9uJyApO1xuICAgKlxuICAgKiAgICAgaW5mbGVjdGlvbi5mb3JlaWduX2tleSggJ01lc3NhZ2VCdXNQcm9wZXJ0eScgKTsgLy8gPT09ICdtZXNzYWdlX2J1c19wcm9wZXJ0eV9pZCdcbiAgICogICAgIGluZmxlY3Rpb24uZm9yZWlnbl9rZXkoICdNZXNzYWdlQnVzUHJvcGVydHknLCB0cnVlICk7IC8vID09PSAnbWVzc2FnZV9idXNfcHJvcGVydHlpZCdcbiAgICovXG4gICAgZm9yZWlnbl9rZXkgOiBmdW5jdGlvbiAoIHN0ciwgZHJvcF9pZF91YmFyICl7XG4gICAgICBzdHIgPSBpbmZsZWN0b3IuZGVtb2R1bGl6ZSggc3RyICk7XG4gICAgICBzdHIgPSBpbmZsZWN0b3IudW5kZXJzY29yZSggc3RyICkgKyAoKCBkcm9wX2lkX3ViYXIgKSA/ICggJycgKSA6ICggJ18nICkpICsgJ2lkJztcblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9LFxuXG5cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhZGRzIG9yZGluYWxpemUgc3VwcG9ydCB0byBldmVyeSBTdHJpbmcgb2JqZWN0LlxuICAgKiBAcHVibGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdWJqZWN0IHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJuIGFsbCBmb3VuZCBudW1iZXJzIHRoZWlyIHNlcXVlbmNlIGxpa2UgJzIybmQnLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgICAgdmFyIGluZmxlY3Rpb24gPSByZXF1aXJlKCAnaW5mbGVjdGlvbicgKTtcbiAgICpcbiAgICogICAgIGluZmxlY3Rpb24ub3JkaW5hbGl6ZSggJ3RoZSAxIHBpdGNoJyApOyAvLyA9PT0gJ3RoZSAxc3QgcGl0Y2gnXG4gICAqL1xuICAgIG9yZGluYWxpemUgOiBmdW5jdGlvbiAoIHN0ciApe1xuICAgICAgdmFyIHN0cl9hcnIgPSBzdHIuc3BsaXQoICcgJyApO1xuICAgICAgdmFyIGkgICAgICAgPSAwO1xuICAgICAgdmFyIGogICAgICAgPSBzdHJfYXJyLmxlbmd0aDtcblxuICAgICAgZm9yKCA7IGkgPCBqOyBpKysgKXtcbiAgICAgICAgdmFyIGsgPSBwYXJzZUludCggc3RyX2FyclsgaSBdLCAxMCApO1xuXG4gICAgICAgIGlmKCAhaXNOYU4oIGsgKSl7XG4gICAgICAgICAgdmFyIGx0ZCA9IHN0cl9hcnJbIGkgXS5zdWJzdHJpbmcoIHN0cl9hcnJbIGkgXS5sZW5ndGggLSAyICk7XG4gICAgICAgICAgdmFyIGxkICA9IHN0cl9hcnJbIGkgXS5zdWJzdHJpbmcoIHN0cl9hcnJbIGkgXS5sZW5ndGggLSAxICk7XG4gICAgICAgICAgdmFyIHN1ZiA9ICd0aCc7XG5cbiAgICAgICAgICBpZiggbHRkICE9ICcxMScgJiYgbHRkICE9ICcxMicgJiYgbHRkICE9ICcxMycgKXtcbiAgICAgICAgICAgIGlmKCBsZCA9PT0gJzEnICl7XG4gICAgICAgICAgICAgIHN1ZiA9ICdzdCc7XG4gICAgICAgICAgICB9ZWxzZSBpZiggbGQgPT09ICcyJyApe1xuICAgICAgICAgICAgICBzdWYgPSAnbmQnO1xuICAgICAgICAgICAgfWVsc2UgaWYoIGxkID09PSAnMycgKXtcbiAgICAgICAgICAgICAgc3VmID0gJ3JkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdHJfYXJyWyBpIF0gKz0gc3VmO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHJfYXJyLmpvaW4oICcgJyApO1xuICAgIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgbXVsdGlwbGUgaW5mbGVjdGlvbiBtZXRob2RzIG9uIGEgc3RyaW5nXG4gICAqIEBwdWJsaWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN1YmplY3Qgc3RyaW5nLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnIgQW4gYXJyYXkgb2YgaW5mbGVjdGlvbiBtZXRob2RzLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgICAgdmFyIGluZmxlY3Rpb24gPSByZXF1aXJlKCAnaW5mbGVjdGlvbicgKTtcbiAgICpcbiAgICogICAgIGluZmxlY3Rpb24udHJhbnNmb3JtKCAnYWxsIGpvYicsIFsgJ3BsdXJhbGl6ZScsICdjYXBpdGFsaXplJywgJ2Rhc2hlcml6ZScgXSk7IC8vID09PSAnQWxsLWpvYnMnXG4gICAqL1xuICAgIHRyYW5zZm9ybSA6IGZ1bmN0aW9uICggc3RyLCBhcnIgKXtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBqID0gYXJyLmxlbmd0aDtcblxuICAgICAgZm9yKCA7aSA8IGo7IGkrKyApe1xuICAgICAgICB2YXIgbWV0aG9kID0gYXJyWyBpIF07XG5cbiAgICAgICAgaWYoIGluZmxlY3Rvci5oYXNPd25Qcm9wZXJ0eSggbWV0aG9kICkpe1xuICAgICAgICAgIHN0ciA9IGluZmxlY3RvclsgbWV0aG9kIF0oIHN0ciApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuICBpbmZsZWN0b3IudmVyc2lvbiA9ICcxLjEzLjEnO1xuXG4gIHJldHVybiBpbmZsZWN0b3I7XG59KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inflection/lib/inflection.js\n");

/***/ })

};
;